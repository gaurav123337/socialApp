[{"C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\components\\PostForm.js":"1","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\ApolloProvider.js":"2","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\index.js":"3","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\pages\\Register.js":"4","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\context\\auth.js":"5","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\components\\PostCard.js":"6","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\App.js":"7","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\pages\\Home.js":"8","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\components\\MenuBar.js":"9","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\util\\hooks.js":"10","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\util\\graphql.js":"11","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\reportWebVitals.js":"12","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\pages\\Login.js":"13","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\util\\AuthRoute.js":"14","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\components\\LikeButton.js":"15","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\pages\\SinglePost.js":"16","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\components\\DeleteButton.js":"17"},{"size":2008,"mtime":1616230630287,"results":"18","hashOfConfig":"19"},{"size":772,"mtime":1615651253344,"results":"20","hashOfConfig":"19"},{"size":436,"mtime":1612097034685,"results":"21","hashOfConfig":"19"},{"size":2860,"mtime":1615729881674,"results":"22","hashOfConfig":"19"},{"size":1307,"mtime":1615654806580,"results":"23","hashOfConfig":"19"},{"size":1535,"mtime":1616256021321,"results":"24","hashOfConfig":"19"},{"size":914,"mtime":1616257183822,"results":"25","hashOfConfig":"19"},{"size":1462,"mtime":1616302047522,"results":"26","hashOfConfig":"19"},{"size":1460,"mtime":1615731368864,"results":"27","hashOfConfig":"19"},{"size":404,"mtime":1615056763829,"results":"28","hashOfConfig":"19"},{"size":331,"mtime":1615733743955,"results":"29","hashOfConfig":"19"},{"size":362,"mtime":1612092429903,"results":"30","hashOfConfig":"19"},{"size":2243,"mtime":1615729881683,"results":"31","hashOfConfig":"19"},{"size":439,"mtime":1615643542060,"results":"32","hashOfConfig":"19"},{"size":1459,"mtime":1616245939322,"results":"33","hashOfConfig":"19"},{"size":3159,"mtime":1616327633389,"results":"34","hashOfConfig":"19"},{"size":1383,"mtime":1616327956682,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"1ct8b6q",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"39"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"39"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"39"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"39"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"39"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\components\\PostForm.js",["77"],"import React from 'react';\r\n\r\nimport {Button, Form} from 'semantic-ui-react';\r\nimport gql from 'graphql-tag';\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport {useForm} from '../util/hooks';\r\nimport {FETCH_POSTS_QUERY} from '../util/graphql';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction PostForm(){\r\n  const {values, onChange, onSubmit} = useForm(createPostCallback, {\r\n    body: ''\r\n  });\r\n\r\n  const [createPost, {error} ] = useMutation(CREATE_POST_MUTATION, {\r\n    variables: values,\r\n    update(proxy, result){\r\n      const data = proxy.readQuery({\r\n        query: FETCH_POSTS_QUERY\r\n      });\r\n      data.getPosts = [result.data.createPost, ...data.getPosts];\r\n      console.log(data.getPosts, 'gata', data);\r\n      proxy.writeQuery({query: FETCH_POSTS_QUERY, data});\r\n      console.log( data);\r\n      values.body='';\r\n    }\r\n  });\r\n\r\n  function createPostCallback(){\r\n    createPost();\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Form onSubmit={onSubmit}>\r\n      <h2>Create post :</h2>\r\n      <Form.Field>\r\n        <Form.Input\r\n          placeholder=\"Hi world!\"\r\n          name=\"body\"\r\n          onChange={onChange}\r\n          value={values.body}\r\n          error ={error ? true : false}\r\n        />\r\n        <Button type=\"submit\" color=\"teal\">\r\n          Submit\r\n        </Button>\r\n      </Form.Field>\r\n    </Form>\r\n    {error && (\r\n      <div className=\"ui error message\" style={{ marginBottom: 20}}>\r\n        <ul className=\"list\">\r\n        <li>\r\n          {error.graphQLErrors[0].message}\r\n        </li>\r\n        </ul>\r\n      </div>\r\n    )}\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nconst CREATE_POST_MUTATION = gql`\r\n  mutation createPost($body: String!){\r\n    createPost(body: $body){\r\n      id\r\n      body\r\n      createdAt\r\n      username\r\n      likes{\r\n        id\r\n        username\r\n        createdAt\r\n      }\r\n      likeCount\r\n      comments{\r\n        id\r\n        body\r\n        username\r\n        createdAt\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nPostForm.propTypes = {};\r\n\r\nexport default PostForm;\r\n",["78","79"],"C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\ApolloProvider.js",[],"C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\index.js",[],"C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\pages\\Register.js",["80"],"import React, { useState, useContext } from 'react';\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport PropTypes from 'prop-types';\r\nimport {AuthContext} from '../context/auth';\r\nimport {useForm } from '../util/hooks';\r\n\r\nconst Register = (props) => {\r\n  const context = useContext(AuthContext);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const {onChange, onSubmit, values} = useForm(registerUser, {\r\n    username:'',\r\n    email:'',\r\n    password:'',\r\n    confirmPassword:''}\r\n  )\r\n\r\n  const [addUser, {loading} ] = useMutation(REGISTER_USER, {\r\n    update(_, {data: {register: userData}}){\r\n      context.login(userData);\r\n      props.history.push('/');\r\n    },\r\n    onError(err){\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n    },\r\n    variables: values\r\n  })\r\n\r\n  function registerUser(){\r\n    addUser();\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\r\n      <h1>Register</h1>\r\n      <Form.Input label='Username' placeholder='Username...' name='username' value={values.username}\r\n      type=\"text\"\r\n      error={errors.username ? true : false}\r\n      onChange={onChange}/>\r\n      <Form.Input label='Email' placeholder='Email...' name='email' value={values.email}\r\n      type=\"email\"\r\n      error={errors.email ? true : false}\r\n      onChange={onChange}/>\r\n      <Form.Input label='Password' placeholder='Password...' name='password' value={values.password}\r\n      type=\"password\"\r\n      error={errors.password ? true : false}\r\n      onChange={onChange}/>\r\n      <Form.Input label='Confirm Password' placeholder='Confirm Password...' name='confirmPassword' value={values.confirmPassword}\r\n      type=\"password\"\r\n      error={errors.confirmPassword ? true : false}\r\n      onChange={onChange}/>\r\n      <Button type=\"submit\" primary>\r\n        Register\r\n      </Button>\r\n      </Form>\r\n      {\r\n        Object.keys(errors).length > 0 && (\r\n          <div className=\"ui error message\">\r\n            <ul className=\"list\">\r\n              {Object.values(errors).map((val) => {\r\n                return (<li key={val}>\r\n                  {val}\r\n                </li>)\r\n              })}\r\n            </ul>\r\n          </div>\r\n        )\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nRegister.propTypes = {};\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation register(\r\n    $username: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        username: $username\r\n        email: $email\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n      }\r\n    ){\r\n      id\r\n      username\r\n      email\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Register;\r\n","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\context\\auth.js",[],"C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\components\\PostCard.js",["81"],"import React, { useContext } from 'react';\r\nimport { Card, Icon, Label, Image, Button } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport LikeButton from './LikeButton';\r\nimport DeleteButton from './DeleteButton';\r\n\r\nfunction PostCard({\r\n  post: { id, body, createdAt, username, likeCount, commentCount, likes }\r\n}) {\r\n  const { user } = useContext(AuthContext);\r\n  function likePost() {\r\n    console.log('Post like');\r\n  }\r\n\r\n  return (\r\n    <Card fluid>\r\n      <Card.Content>\r\n        <Image\r\n          floated='right'\r\n          size='mini'\r\n          src='https://react.semantic-ui.com/images/avatar/large/steve.jpg'\r\n        />\r\n        <Card.Header>{username}</Card.Header>\r\n        <Card.Meta as={Link} to={`/posts/${id}`}>\r\n          {moment(createdAt).fromNow(true)}\r\n        </Card.Meta>\r\n        <Card.Description>\r\n          {body}\r\n        </Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <LikeButton user={user} post={{id, likes, likeCount}}/>\r\n        <Button labelPosition='right' as={Link} to={`/post/${id}`} >\r\n          <Button color='blue' basic>\r\n            <Icon name='comments' />\r\n          </Button>\r\n          <Label basic color='blue' pointing='left'>\r\n            {commentCount}\r\n          </Label>\r\n        </Button>\r\n        {user && user.username === username && <DeleteButton postId={id} />}\r\n      </Card.Content>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default PostCard;\r\n","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\App.js",[],"C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\pages\\Home.js",["82"],"import React, {useContext } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Grid,Transition } from 'semantic-ui-react';\r\nimport { AuthContext } from '../context/auth';\r\nimport PostCard from '../components/PostCard';\r\nimport PostForm from '../components/PostForm';\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\r\n\r\nconst Home = () => {\r\n  const {user} = useContext(AuthContext);\r\n\r\n  const { loading, data  } = useQuery(FETCH_POSTS_QUERY);\r\n  let posts;\r\n  if(!loading) {\r\n    const { getPosts }  = data;\r\n    posts = getPosts;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid columns={3}>\r\n      <Grid.Row className=\"page-title\">\r\n          <h1>Recent Posts</h1>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          { user && (\r\n            <Grid.Column>\r\n              <PostForm />\r\n            </Grid.Column>\r\n          )}\r\n          {loading ? (\r\n            <h1>Loading ...</h1>\r\n          ) : (\r\n            <Transition.Group>\r\n              {\r\n                posts && posts.map(post => {\r\n                  return (\r\n                    <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\r\n                      <PostCard post={post}/>\r\n                    </Grid.Column>\r\n                  )\r\n                })\r\n              }\r\n            </Transition.Group>\r\n\r\n          )}\r\n        </Grid.Row>\r\n    </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nHome.propTypes = {};\r\n\r\nexport default Home;\r\n","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\components\\MenuBar.js",[],"C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\util\\hooks.js",[],"C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\util\\graphql.js",[],"C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\pages\\Login.js",["83"],"import React, { useState, useContext } from 'react';\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport PropTypes from 'prop-types';\r\nimport {AuthContext} from '../context/auth'\r\n\r\nimport {useForm} from '../util/hooks';\r\n\r\nconst Login = (props) => {\r\n  const context = useContext(AuthContext);\r\n\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const {onSubmit, onChange, values} = useForm(loginUserCallback, {\r\n    username: '',\r\n    password: ''\r\n  })\r\n\r\n  const [loginUser, {loading} ] = useMutation(LOGIN_USER, {\r\n    update(_, {data: {login: userData}}){\r\n      context.login(userData);\r\n      props.history.push('/');\r\n    },\r\n    onError(err){\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n    },\r\n    variables: values\r\n  })\r\n\r\n  function loginUserCallback(event){\r\n    loginUser();\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\r\n      <h1>Login</h1>\r\n      <Form.Input label='Username' placeholder='Username...' name='username' value={values.username}\r\n      type=\"text\"\r\n      error={errors.username ? true : false}\r\n      onChange={onChange}/>\r\n\r\n      <Form.Input label='Password' placeholder='Password...' name='password' value={values.password}\r\n      type=\"password\"\r\n      error={errors.password ? true : false}\r\n      onChange={onChange}/>\r\n      <Button type=\"submit\" primary>\r\n        Login\r\n      </Button>\r\n      </Form>\r\n      {\r\n        Object.keys(errors).length > 0 && (\r\n          <div className=\"ui error message\">\r\n            <ul className=\"list\">\r\n              {Object.values(errors).map((val) => {\r\n                return (<li key={val}>\r\n                  {val}\r\n                </li>)\r\n              })}\r\n            </ul>\r\n          </div>\r\n        )\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nLogin.propTypes = {};\r\n\r\nconst LOGIN_USER = gql`\r\n  mutation login(\r\n    $username: String!\r\n    $password: String!\r\n  ) {\r\n    login(\r\n        username: $username\r\n        password: $password\r\n    ){\r\n      id\r\n      username\r\n      email\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Login;\r\n","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\util\\AuthRoute.js",[],"C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\components\\LikeButton.js",["84"],"import React, { useState, useEffect } from 'react';\r\nimport { Icon, Label, Button } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst LikeButton = ({ user, post: { id, likeCount, likes } }) => {\r\n  const [liked, setLiked] = useState(false);\r\n  useEffect(() => {\r\n    if (user && likes.find(like => like.username === user.username)) {\r\n      setLiked(true)\r\n    } else setLiked(false)\r\n  }, [user, likes]);\r\n\r\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n    variables: { postId: id }\r\n  });\r\n\r\n  const likeButton = user ? (\r\n    liked ? (\r\n      <Button color='teal' >\r\n        <Icon name='heart' />\r\n      </Button>\r\n    ) : (\r\n      <Button color='teal' basic>\r\n        <Icon name='heart' />\r\n      </Button>\r\n    )\r\n  ) : (\r\n    <Button as={Link} to={'/login'} color='teal' basic>\r\n      <Icon name='heart' />\r\n    </Button>\r\n  )\r\n\r\n  return (\r\n\r\n    <Button as='div' labelPosition='right' onClick={likePost}>\r\n\r\n      {likeButton}\r\n      <Label basic color='teal' pointing='left'>\r\n        {likeCount}\r\n      </Label>\r\n    </Button>\r\n\r\n  );\r\n};\r\n\r\nconst LIKE_POST_MUTATION = gql`\r\n  mutation likePost($postId: ID!){\r\n    likePost(postId: $postId){\r\n      id\r\n      likes{\r\n        id username\r\n      }\r\n      likeCount\r\n    }\r\n  }\r\n`;\r\n\r\nLikeButton.propTypes = {};\r\n\r\nexport default LikeButton;\r\n","C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\pages\\SinglePost.js",["85","86"],"C:\\Users\\Gaurav\\Desktop\\Demo\\SocialApp\\merng\\socialApp\\client\\src\\components\\DeleteButton.js",["87","88"],{"ruleId":"89","severity":1,"message":"90","line":9,"column":8,"nodeType":"91","messageId":"92","endLine":9,"endColumn":17},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"89","severity":1,"message":"90","line":5,"column":8,"nodeType":"91","messageId":"92","endLine":5,"endColumn":17},{"ruleId":"89","severity":1,"message":"97","line":14,"column":12,"nodeType":"91","messageId":"92","endLine":14,"endColumn":20},{"ruleId":"89","severity":1,"message":"90","line":4,"column":8,"nodeType":"91","messageId":"92","endLine":4,"endColumn":17},{"ruleId":"89","severity":1,"message":"90","line":5,"column":8,"nodeType":"91","messageId":"92","endLine":5,"endColumn":17},{"ruleId":"89","severity":1,"message":"90","line":6,"column":8,"nodeType":"91","messageId":"92","endLine":6,"endColumn":17},{"ruleId":"89","severity":1,"message":"90","line":9,"column":8,"nodeType":"91","messageId":"92","endLine":9,"endColumn":17},{"ruleId":"89","severity":1,"message":"98","line":42,"column":46,"nodeType":"91","messageId":"92","endLine":42,"endColumn":54},{"ruleId":"89","severity":1,"message":"99","line":1,"column":26,"nodeType":"91","messageId":"92","endLine":1,"endColumn":35},{"ruleId":"89","severity":1,"message":"90","line":8,"column":8,"nodeType":"91","messageId":"92","endLine":8,"endColumn":17},"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","no-native-reassign",["100"],"no-negated-in-lhs",["101"],"'likePost' is defined but never used.","'comments' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]